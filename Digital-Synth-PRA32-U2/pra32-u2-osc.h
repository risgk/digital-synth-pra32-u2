#pragma once

#include "pra32-u2-common.h"
#include "pra32-u2-osc-table.h"
#include <math.h>


// see "pra32-u2-data.ods"
static uint16_t g_osc_sqr_shape_table[192 + 1][16] = {
  { 0,      32768,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      32415,  64830,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      32066,  64132,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      31720,  63440,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      31379,  62758,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      31041,  62082,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      30706,  61412,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      30376,  60752,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      30048,  60096,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      29725,  59450,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      29405,  58810,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      29088,  58176,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      28774,  57548,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      28464,  56928,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      28158,  56316,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      27855,  55710,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      27554,  55108,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      27258,  54516,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      26964,  53928,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      26674,  53348,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      26386,  52772,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      26102,  52204,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      25821,  51642,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      25543,  51086,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      25268,  50536,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      24995,  49990,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      24726,  49452,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      24460,  48920,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      24196,  48392,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      23936,  47872,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      23678,  47356,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      23423,  46846,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      23170,  46340,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      22921,  45842,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      22674,  45348,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      22430,  44860,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      22188,  44376,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      21949,  43898,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      21713,  43426,  65139,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      21479,  42958,  64437,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      21247,  42494,  63741,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      21019,  42038,  63057,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      20792,  41584,  62376,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      20568,  41136,  61704,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      20347,  40694,  61041,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      20127,  40254,  60381,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      19911,  39822,  59733,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      19696,  39392,  59088,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      19484,  38968,  58452,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      19274,  38548,  57822,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      19066,  38132,  57198,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      18861,  37722,  56583,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      18658,  37316,  55974,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      18457,  36914,  55371,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      18258,  36516,  54774,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      18061,  36122,  54183,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      17867,  35734,  53601,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      17674,  35348,  53022,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      17484,  34968,  52452,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      17296,  34592,  51888,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      17109,  34218,  51327,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      16925,  33850,  50775,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      16743,  33486,  50229,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      16562,  33124,  49686,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      16384,  32768,  49152,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      16208,  32416,  48624,  64832,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      16033,  32066,  48099,  64132,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      15860,  31720,  47580,  63440,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      15689,  31378,  47067,  62756,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      15520,  31040,  46560,  62080,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      15353,  30706,  46059,  61412,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      15188,  30376,  45564,  60752,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      15024,  30048,  45072,  60096,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      14862,  29724,  44586,  59448,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      14702,  29404,  44106,  58808,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      14544,  29088,  43632,  58176,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      14387,  28774,  43161,  57548,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      14232,  28464,  42696,  56928,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      14079,  28158,  42237,  56316,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      13927,  27854,  41781,  55708,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      13777,  27554,  41331,  55108,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      13629,  27258,  40887,  54516,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      13482,  26964,  40446,  53928,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      13337,  26674,  40011,  53348,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      13193,  26386,  39579,  52772,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      13051,  26102,  39153,  52204,  65255,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      12910,  25820,  38730,  51640,  64550,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      12771,  25542,  38313,  51084,  63855,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      12634,  25268,  37902,  50536,  63170,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      12498,  24996,  37494,  49992,  62490,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      12363,  24726,  37089,  49452,  61815,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      12230,  24460,  36690,  48920,  61150,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      12098,  24196,  36294,  48392,  60490,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      11968,  23936,  35904,  47872,  59840,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      11839,  23678,  35517,  47356,  59195,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      11711,  23422,  35133,  46844,  58555,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      11585,  23170,  34755,  46340,  57925,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      11460,  22920,  34380,  45840,  57300,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      11337,  22674,  34011,  45348,  56685,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      11215,  22430,  33645,  44860,  56075,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      11094,  22188,  33282,  44376,  55470,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      10975,  21950,  32925,  43900,  54875,  0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      10856,  21712,  32568,  43424,  54280,  65136,  0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      10739,  21478,  32217,  42956,  53695,  64434,  0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      10624,  21248,  31872,  42496,  53120,  63744,  0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      10509,  21018,  31527,  42036,  52545,  63054,  0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      10396,  20792,  31188,  41584,  51980,  62376,  0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      10284,  20568,  30852,  41136,  51420,  61704,  0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      10173,  20346,  30519,  40692,  50865,  61038,  0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      10064,  20128,  30192,  40256,  50320,  60384,  0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      9955,   19910,  29865,  39820,  49775,  59730,  0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      9848,   19696,  29544,  39392,  49240,  59088,  0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      9742,   19484,  29226,  38968,  48710,  58452,  0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      9637,   19274,  28911,  38548,  48185,  57822,  0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      9533,   19066,  28599,  38132,  47665,  57198,  0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      9431,   18862,  28293,  37724,  47155,  56586,  0,      0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      9329,   18658,  27987,  37316,  46645,  55974,  65303,  0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      9228,   18456,  27684,  36912,  46140,  55368,  64596,  0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      9129,   18258,  27387,  36516,  45645,  54774,  63903,  0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      9031,   18062,  27093,  36124,  45155,  54186,  63217,  0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      8933,   17866,  26799,  35732,  44665,  53598,  62531,  0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      8837,   17674,  26511,  35348,  44185,  53022,  61859,  0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      8742,   17484,  26226,  34968,  43710,  52452,  61194,  0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      8648,   17296,  25944,  34592,  43240,  51888,  60536,  0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      8555,   17110,  25665,  34220,  42775,  51330,  59885,  0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      8463,   16926,  25389,  33852,  42315,  50778,  59241,  0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      8371,   16742,  25113,  33484,  41855,  50226,  58597,  0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      8281,   16562,  24843,  33124,  41405,  49686,  57967,  0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      8192,   16384,  24576,  32768,  40960,  49152,  57344,  0,      0,      0,      0,      0,      0,      0,      0,      },
  { 0,      8104,   16208,  24312,  32416,  40520,  48624,  56728,  64832,  0,      0,      0,      0,      0,      0,      0,      },
  { 0,      8016,   16032,  24048,  32064,  40080,  48096,  56112,  64128,  0,      0,      0,      0,      0,      0,      0,      },
  { 0,      7930,   15860,  23790,  31720,  39650,  47580,  55510,  63440,  0,      0,      0,      0,      0,      0,      0,      },
  { 0,      7845,   15690,  23535,  31380,  39225,  47070,  54915,  62760,  0,      0,      0,      0,      0,      0,      0,      },
  { 0,      7760,   15520,  23280,  31040,  38800,  46560,  54320,  62080,  0,      0,      0,      0,      0,      0,      0,      },
  { 0,      7677,   15354,  23031,  30708,  38385,  46062,  53739,  61416,  0,      0,      0,      0,      0,      0,      0,      },
  { 0,      7594,   15188,  22782,  30376,  37970,  45564,  53158,  60752,  0,      0,      0,      0,      0,      0,      0,      },
  { 0,      7512,   15024,  22536,  30048,  37560,  45072,  52584,  60096,  0,      0,      0,      0,      0,      0,      0,      },
  { 0,      7431,   14862,  22293,  29724,  37155,  44586,  52017,  59448,  0,      0,      0,      0,      0,      0,      0,      },
  { 0,      7351,   14702,  22053,  29404,  36755,  44106,  51457,  58808,  0,      0,      0,      0,      0,      0,      0,      },
  { 0,      7272,   14544,  21816,  29088,  36360,  43632,  50904,  58176,  65448,  0,      0,      0,      0,      0,      0,      },
  { 0,      7194,   14388,  21582,  28776,  35970,  43164,  50358,  57552,  64746,  0,      0,      0,      0,      0,      0,      },
  { 0,      7116,   14232,  21348,  28464,  35580,  42696,  49812,  56928,  64044,  0,      0,      0,      0,      0,      0,      },
  { 0,      7039,   14078,  21117,  28156,  35195,  42234,  49273,  56312,  63351,  0,      0,      0,      0,      0,      0,      },
  { 0,      6964,   13928,  20892,  27856,  34820,  41784,  48748,  55712,  62676,  0,      0,      0,      0,      0,      0,      },
  { 0,      6889,   13778,  20667,  27556,  34445,  41334,  48223,  55112,  62001,  0,      0,      0,      0,      0,      0,      },
  { 0,      6814,   13628,  20442,  27256,  34070,  40884,  47698,  54512,  61326,  0,      0,      0,      0,      0,      0,      },
  { 0,      6741,   13482,  20223,  26964,  33705,  40446,  47187,  53928,  60669,  0,      0,      0,      0,      0,      0,      },
  { 0,      6668,   13336,  20004,  26672,  33340,  40008,  46676,  53344,  60012,  0,      0,      0,      0,      0,      0,      },
  { 0,      6597,   13194,  19791,  26388,  32985,  39582,  46179,  52776,  59373,  0,      0,      0,      0,      0,      0,      },
  { 0,      6526,   13052,  19578,  26104,  32630,  39156,  45682,  52208,  58734,  65260,  0,      0,      0,      0,      0,      },
  { 0,      6455,   12910,  19365,  25820,  32275,  38730,  45185,  51640,  58095,  64550,  0,      0,      0,      0,      0,      },
  { 0,      6386,   12772,  19158,  25544,  31930,  38316,  44702,  51088,  57474,  63860,  0,      0,      0,      0,      0,      },
  { 0,      6317,   12634,  18951,  25268,  31585,  37902,  44219,  50536,  56853,  63170,  0,      0,      0,      0,      0,      },
  { 0,      6249,   12498,  18747,  24996,  31245,  37494,  43743,  49992,  56241,  62490,  0,      0,      0,      0,      0,      },
  { 0,      6182,   12364,  18546,  24728,  30910,  37092,  43274,  49456,  55638,  61820,  0,      0,      0,      0,      0,      },
  { 0,      6115,   12230,  18345,  24460,  30575,  36690,  42805,  48920,  55035,  61150,  0,      0,      0,      0,      0,      },
  { 0,      6049,   12098,  18147,  24196,  30245,  36294,  42343,  48392,  54441,  60490,  0,      0,      0,      0,      0,      },
  { 0,      5984,   11968,  17952,  23936,  29920,  35904,  41888,  47872,  53856,  59840,  0,      0,      0,      0,      0,      },
  { 0,      5919,   11838,  17757,  23676,  29595,  35514,  41433,  47352,  53271,  59190,  65109,  0,      0,      0,      0,      },
  { 0,      5856,   11712,  17568,  23424,  29280,  35136,  40992,  46848,  52704,  58560,  64416,  0,      0,      0,      0,      },
  { 0,      5793,   11586,  17379,  23172,  28965,  34758,  40551,  46344,  52137,  57930,  63723,  0,      0,      0,      0,      },
  { 0,      5730,   11460,  17190,  22920,  28650,  34380,  40110,  45840,  51570,  57300,  63030,  0,      0,      0,      0,      },
  { 0,      5668,   11336,  17004,  22672,  28340,  34008,  39676,  45344,  51012,  56680,  62348,  0,      0,      0,      0,      },
  { 0,      5607,   11214,  16821,  22428,  28035,  33642,  39249,  44856,  50463,  56070,  61677,  0,      0,      0,      0,      },
  { 0,      5547,   11094,  16641,  22188,  27735,  33282,  38829,  44376,  49923,  55470,  61017,  0,      0,      0,      0,      },
  { 0,      5487,   10974,  16461,  21948,  27435,  32922,  38409,  43896,  49383,  54870,  60357,  0,      0,      0,      0,      },
  { 0,      5428,   10856,  16284,  21712,  27140,  32568,  37996,  43424,  48852,  54280,  59708,  65136,  0,      0,      0,      },
  { 0,      5370,   10740,  16110,  21480,  26850,  32220,  37590,  42960,  48330,  53700,  59070,  64440,  0,      0,      0,      },
  { 0,      5312,   10624,  15936,  21248,  26560,  31872,  37184,  42496,  47808,  53120,  58432,  63744,  0,      0,      0,      },
  { 0,      5255,   10510,  15765,  21020,  26275,  31530,  36785,  42040,  47295,  52550,  57805,  63060,  0,      0,      0,      },
  { 0,      5198,   10396,  15594,  20792,  25990,  31188,  36386,  41584,  46782,  51980,  57178,  62376,  0,      0,      0,      },
  { 0,      5142,   10284,  15426,  20568,  25710,  30852,  35994,  41136,  46278,  51420,  56562,  61704,  0,      0,      0,      },
  { 0,      5087,   10174,  15261,  20348,  25435,  30522,  35609,  40696,  45783,  50870,  55957,  61044,  0,      0,      0,      },
  { 0,      5032,   10064,  15096,  20128,  25160,  30192,  35224,  40256,  45288,  50320,  55352,  60384,  65416,  0,      0,      },
  { 0,      4978,   9956,   14934,  19912,  24890,  29868,  34846,  39824,  44802,  49780,  54758,  59736,  64714,  0,      0,      },
  { 0,      4924,   9848,   14772,  19696,  24620,  29544,  34468,  39392,  44316,  49240,  54164,  59088,  64012,  0,      0,      },
  { 0,      4871,   9742,   14613,  19484,  24355,  29226,  34097,  38968,  43839,  48710,  53581,  58452,  63323,  0,      0,      },
  { 0,      4819,   9638,   14457,  19276,  24095,  28914,  33733,  38552,  43371,  48190,  53009,  57828,  62647,  0,      0,      },
  { 0,      4767,   9534,   14301,  19068,  23835,  28602,  33369,  38136,  42903,  47670,  52437,  57204,  61971,  0,      0,      },
  { 0,      4715,   9430,   14145,  18860,  23575,  28290,  33005,  37720,  42435,  47150,  51865,  56580,  61295,  0,      0,      },
  { 0,      4664,   9328,   13992,  18656,  23320,  27984,  32648,  37312,  41976,  46640,  51304,  55968,  60632,  65296,  0,      },
  { 0,      4614,   9228,   13842,  18456,  23070,  27684,  32298,  36912,  41526,  46140,  50754,  55368,  59982,  64596,  0,      },
  { 0,      4565,   9130,   13695,  18260,  22825,  27390,  31955,  36520,  41085,  45650,  50215,  54780,  59345,  63910,  0,      },
  { 0,      4515,   9030,   13545,  18060,  22575,  27090,  31605,  36120,  40635,  45150,  49665,  54180,  58695,  63210,  0,      },
  { 0,      4467,   8934,   13401,  17868,  22335,  26802,  31269,  35736,  40203,  44670,  49137,  53604,  58071,  62538,  0,      },
  { 0,      4419,   8838,   13257,  17676,  22095,  26514,  30933,  35352,  39771,  44190,  48609,  53028,  57447,  61866,  0,      },
  { 0,      4371,   8742,   13113,  17484,  21855,  26226,  30597,  34968,  39339,  43710,  48081,  52452,  56823,  61194,  0,      },
  { 0,      4324,   8648,   12972,  17296,  21620,  25944,  30268,  34592,  38916,  43240,  47564,  51888,  56212,  60536,  64860,  },
  { 0,      4277,   8554,   12831,  17108,  21385,  25662,  29939,  34216,  38493,  42770,  47047,  51324,  55601,  59878,  64155,  },
  { 0,      4231,   8462,   12693,  16924,  21155,  25386,  29617,  33848,  38079,  42310,  46541,  50772,  55003,  59234,  63465,  },
  { 0,      4186,   8372,   12558,  16744,  20930,  25116,  29302,  33488,  37674,  41860,  46046,  50232,  54418,  58604,  62790,  },
  { 0,      4141,   8282,   12423,  16564,  20705,  24846,  28987,  33128,  37269,  41410,  45551,  49692,  53833,  57974,  62115,  },
  { 0,      4141,   8282,   12423,  16564,  20705,  24846,  28987,  33128,  37269,  41410,  45551,  49692,  53833,  57974,  62115,  },
};


class PRA32_U2_Osc {
  static const uint8_t OSC_MIX_TABLE_LENGTH   = 65;

  static const uint8_t PORTAMENTO_COEF_BASE   = 190;

  static const uint8_t WAVEFORM_SAW           = 0;
  static const uint8_t WAVEFORM_SQUARE        = 1;
  static const uint8_t WAVEFORM_TRIANGLE      = 2;
  static const uint8_t WAVEFORM_SINE          = 3;
  static const uint8_t WAVEFORM_1_PULSE       = 4;
  static const uint8_t WAVEFORM_2_NOISE       = 5;

  uint32_t       m_portamento_coef[4];
  int16_t        m_pitch_eg_amt[2];
  int16_t        m_pitch_lfo_amt[2];

  uint8_t        m_waveform[2];
  int16_t        m_pitch_bend;
  uint8_t        m_pitch_bend_range;
  int16_t        m_pitch_bend_normalized;
  uint32_t       m_pitch_target[4];
  uint32_t       m_pitch_current[4];
  const int16_t* m_wave_table[4 * 5];
  const int16_t* m_wave_table_temp[4 * 5];
  uint32_t       m_freq[4 * 2];
  uint32_t       m_freq_base[4 * 2];
  int16_t        m_freq_offset[4 * 2];
  uint32_t       m_phase[4 * 2];
  uint32_t       m_phase_shape_morph[4];
  boolean        m_osc_on[4];
  int8_t         m_osc_gain_effective[4];
  int8_t         m_osc_level;

  boolean        m_gate_enabled;
  uint8_t        m_mixer_osc_mix_control;
  uint8_t        m_mixer_osc_mix_control_effective;
  int8_t         m_osc2_pitch;
  int16_t        m_osc2_detune;

  uint8_t        m_phase_high;
  uint8_t        m_osc1_shape_control;
  uint8_t        m_osc1_shape_control_effective;
  uint8_t        m_osc1_morph_control;
  uint8_t        m_osc1_morph_control_effective;
  int32_t        m_osc1_shape[4];
  int32_t        m_osc1_shape_effective[4];
  uint16_t       m_osc1_phase_modulation_depth[4];
  uint16_t       m_osc1_phase_modulation_frequency_ratio[4];
  int8_t         m_mixer_noise_sub_osc_control;
  int8_t         m_mixer_noise_sub_osc_control_effective;
  int16_t        m_mix_table[OSC_MIX_TABLE_LENGTH];
  int8_t         m_shape_eg_amt;
  int8_t         m_shape_lfo_amt;

public:
  PRA32_U2_Osc()
  : m_portamento_coef()
  , m_pitch_eg_amt()
  , m_pitch_lfo_amt()

  , m_waveform()
  , m_pitch_bend()
  , m_pitch_bend_range()
  , m_pitch_bend_normalized()
  , m_pitch_target()
  , m_pitch_current()
  , m_wave_table()
  , m_wave_table_temp()
  , m_freq()
  , m_freq_base()
  , m_freq_offset()
  , m_phase()
  , m_phase_shape_morph()
  , m_osc_on()
  , m_osc_gain_effective()
  , m_osc_level()

  , m_gate_enabled()
  , m_mixer_osc_mix_control()
  , m_mixer_osc_mix_control_effective()
  , m_osc2_pitch()
  , m_osc2_detune()

  , m_phase_high()
  , m_osc1_shape_control()
  , m_osc1_shape_control_effective()
  , m_osc1_morph_control()
  , m_osc1_morph_control_effective()
  , m_osc1_shape()
  , m_osc1_shape_effective()
  , m_osc1_phase_modulation_depth()
  , m_osc1_phase_modulation_frequency_ratio()
  , m_mixer_noise_sub_osc_control()
  , m_mixer_noise_sub_osc_control_effective()
  , m_mix_table()
  , m_shape_eg_amt()
  , m_shape_lfo_amt()
  {
    m_portamento_coef[0] = 0;
    m_portamento_coef[1] = 0;
    m_portamento_coef[2] = 0;
    m_portamento_coef[3] = 0;

    set_gate_enabled (false);
    set_mixer_osc_mix(0);
    set_osc2_pitch   (0);
    set_osc2_detune  (0);

    m_waveform[0] = WAVEFORM_SAW;
    m_waveform[1] = WAVEFORM_SAW;
    m_pitch_target[0] = 60 << 24;
    m_pitch_target[1] = 60 << 24;
    m_pitch_target[2] = 60 << 24;
    m_pitch_target[3] = 60 << 24;
    m_pitch_current[0] = m_pitch_target[0];
    m_pitch_current[1] = m_pitch_target[1];
    m_pitch_current[2] = m_pitch_target[2];
    m_pitch_current[3] = m_pitch_target[3];
    m_wave_table[0] = g_osc_saw_wave_tables[0];
    m_wave_table[1] = g_osc_saw_wave_tables[0];
    m_wave_table[2] = g_osc_saw_wave_tables[0];
    m_wave_table[3] = g_osc_saw_wave_tables[0];
    m_wave_table[4] = g_osc_saw_wave_tables[0];
    m_wave_table[5] = g_osc_saw_wave_tables[0];
    m_wave_table[6] = g_osc_saw_wave_tables[0];
    m_wave_table[7] = g_osc_saw_wave_tables[0];
    m_wave_table[8] = g_osc_saw_wave_tables[0];
    m_wave_table[9] = g_osc_saw_wave_tables[0];
    m_wave_table[10] = g_osc_saw_wave_tables[0];
    m_wave_table[11] = g_osc_saw_wave_tables[0];
    m_wave_table[12] = g_osc_saw_wave_tables[0];
    m_wave_table[13] = g_osc_saw_wave_tables[0];
    m_wave_table[14] = g_osc_saw_wave_tables[0];
    m_wave_table[15] = g_osc_saw_wave_tables[0];
    m_wave_table[16] = g_osc_saw_wave_tables[0];
    m_wave_table[17] = g_osc_saw_wave_tables[0];
    m_wave_table[18] = g_osc_saw_wave_tables[0];
    m_wave_table[19] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[0] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[1] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[2] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[3] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[4] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[5] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[6] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[7] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[8] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[9] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[10] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[11] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[12] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[13] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[14] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[15] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[16] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[17] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[18] = g_osc_saw_wave_tables[0];
    m_wave_table_temp[19] = g_osc_saw_wave_tables[0];
    m_freq[0] = g_osc_freq_table[0];
    m_freq[1] = g_osc_freq_table[0];
    m_freq[2] = g_osc_freq_table[0];
    m_freq[3] = g_osc_freq_table[0];
    m_freq[4] = g_osc_freq_table[0];
    m_freq[5] = g_osc_freq_table[0];
    m_freq[6] = g_osc_freq_table[0];
    m_freq[7] = g_osc_freq_table[0];
    m_freq_base[0] = g_osc_freq_table[0];
    m_freq_base[1] = g_osc_freq_table[0];
    m_freq_base[2] = g_osc_freq_table[0];
    m_freq_base[3] = g_osc_freq_table[0];
    m_freq_base[4] = g_osc_freq_table[0];
    m_freq_base[5] = g_osc_freq_table[0];
    m_freq_base[6] = g_osc_freq_table[0];
    m_freq_base[7] = g_osc_freq_table[0];
    m_osc_level = 72;

    m_osc1_shape[0]           = 0;
    m_osc1_shape[1]           = 0;
    m_osc1_shape[2]           = 0;
    m_osc1_shape[3]           = 0;
    m_osc1_shape_effective[0] = 0;
    m_osc1_shape_effective[1] = 0;
    m_osc1_shape_effective[2] = 0;
    m_osc1_shape_effective[3] = 0;

    for (uint8_t i = 0; i < OSC_MIX_TABLE_LENGTH; ++i) {
      m_mix_table[i] = static_cast<int16_t>(sqrtf(static_cast<float>(i) /
                                            (OSC_MIX_TABLE_LENGTH - 1)) * (1 << 10));
    }

    set_pitch_bend_range(2);
  }

  template <uint8_t N>
  INLINE void set_osc_waveform(uint8_t controller_value) {
    static uint8_t waveform_tables[2][6] = {
      {
        WAVEFORM_SAW,
        WAVEFORM_SQUARE,
        WAVEFORM_TRIANGLE,
        WAVEFORM_SINE,
        WAVEFORM_SINE,
        WAVEFORM_1_PULSE,
      },
      {
        WAVEFORM_SAW,
        WAVEFORM_SQUARE,
        WAVEFORM_TRIANGLE,
        WAVEFORM_SINE,
        WAVEFORM_SINE,
        WAVEFORM_2_NOISE,
      },
    };

    volatile int32_t index = ((controller_value * 10) + 127) / 254;

    // index = min(index, 5)
    index = index - 5;
    index = (index < 0) * index + 5;

    m_waveform[N] = waveform_tables[N][index];
  }

  INLINE void set_osc1_shape_control(uint8_t controller_value) {
    m_osc1_shape_control = controller_value;
  }

  INLINE void set_osc1_morph_control(uint8_t controller_value) {
    m_osc1_morph_control = controller_value;
  }

  INLINE void set_mixer_sub_osc_control(uint8_t controller_value) {
    m_mixer_noise_sub_osc_control = (((controller_value - 63) >> 1) << 1);
  }

  INLINE int16_t get_pitch_mod_amt_table(uint8_t controller_value) {
    static int16_t pitch_mod_amt_table[128] = {
      -7680, -7680, -7680, -7680, -7424, -7168, -6912, -6656,
      -6400, -6144, -5888, -5632, -5376, -5120, -4864, -4608,
      -4352, -4096, -3840, -3584, -3328, -3072, -2816, -2560,
      -2304, -2048, -1792, -1536, -1280, -1024,  -768,  -512,
       -256,  -248,  -240,  -232,  -224,  -216,  -208,  -200,
       -192,  -184,  -176,  -168,  -160,  -152,  -144,  -136,
       -128,  -120,  -112,  -104,   -96,   -88,   -80,   -72,
        -64,   -56,   -48,   -40,   -32,   -24,   -16,    -8,
         +0,    +8,   +16,   +24,   +32,   +40,   +48,   +56,
        +64,   +72,   +80,   +88,   +96,  +104,  +112,  +120,
       +128,  +136,  +144,  +152,  +160,  +168,  +176,  +184,
       +192,  +200,  +208,  +216,  +224,  +232,  +240,  +248,
       +256,  +512,  +768, +1024, +1280, +1536, +1792, +2048,
      +2304, +2560, +2816, +3072, +3328, +3584, +3840, +4096,
      +4352, +4608, +4864, +5120, +5376, +5632, +5888, +6144,
      +6400, +6656, +6912, +7168, +7424, +7680, +7680, +7680,
    };

    return pitch_mod_amt_table[controller_value];
  }

  template <uint8_t N>
  INLINE void set_pitch_eg_amt(uint8_t controller_value) {
    m_pitch_eg_amt[N] = get_pitch_mod_amt_table(controller_value);
  }

  INLINE void set_shape_eg_amt(uint8_t controller_value) {
    if (controller_value == 0) {
      controller_value = 1;
    }
    m_shape_eg_amt = ((controller_value - 64) << 1);
  }

  template <uint8_t N>
  INLINE void set_pitch_lfo_amt(uint8_t controller_value) {
    m_pitch_lfo_amt[N] = get_pitch_mod_amt_table(controller_value);
  }

  INLINE void set_shape_lfo_amt(uint8_t controller_value) {
    if (controller_value == 0) {
      controller_value = 1;
    }
    m_shape_lfo_amt = -((controller_value - 64) << 1);
  }

  INLINE void set_gate_enabled(boolean gate_enabled) {
    m_gate_enabled = gate_enabled;
  }

  INLINE void set_mixer_osc_mix(uint8_t controller_value) {
    m_mixer_osc_mix_control = ((controller_value + 1) >> 1) << 1;
  }

  INLINE void set_osc2_pitch(uint8_t controller_value) {
    if (controller_value < 4) {
      m_osc2_pitch = -60;
    } else if (controller_value < 124) {
      m_osc2_pitch = controller_value - 64;
    } else {
      m_osc2_pitch = 60;
    }
  }

  INLINE void set_osc2_detune(uint8_t controller_value) {
    static int16_t m_osc2_detune_table[128] = {
      -3072, -3072, -3072, -3072, -3072, -3072, -3072, -3072,
      -3072, -3072, -2944, -2816, -2688, -2560, -2432, -2304,
      -2176, -2048, -1920, -1792, -1664, -1536, -1408, -1280,
      -1152, -1024,  -896,  -768,  -640,  -512,  -384,  -256,
       -128,  -124,  -120,  -116,  -112,  -108,  -104,  -100,
        -96,   -92,   -88,   -84,   -80,   -76,   -72,   -68,
        -64,   -60,   -56,   -52,   -48,   -44,   -40,   -36,
        -32,   -28,   -24,   -20,   -16,   -12,    -8,    -4,
         +0,    +4,    +8,   +12,   +16,   +20,   +24,   +28,
        +32,   +36,   +40,   +44,   +48,   +52,   +56,   +60,
        +64,   +68,   +72,   +76,   +80,   +84,   +88,   +92,
        +96,  +100,  +104,  +108,  +112,  +116,  +120,  +124,
       +128,  +256,  +384,  +512,  +640,  +768,  +896, +1024,
      +1152, +1280, +1408, +1536, +1664, +1792, +1920, +2048,
      +2176, +2304, +2432, +2560, +2688, +2816, +2944, +3072,
      +3072, +3072, +3072, +3072, +3072, +3072, +3072, +3072,
    };

    m_osc2_detune = m_osc2_detune_table[controller_value];
  }

  template <uint8_t N>
  INLINE void set_portamento(uint8_t controller_value) {
    m_portamento_coef[N] = g_portamento_coef_table[controller_value];
  }

  template <uint8_t N>
  INLINE void note_on(uint8_t note_number) {
    uint8_t n;
    if (note_number < NOTE_NUMBER_MIN) {
      n = NOTE_NUMBER_MIN;
    } else if (note_number > NOTE_NUMBER_MAX) {
      n = NOTE_NUMBER_MAX;
    } else {
      n = note_number;
    }

    m_pitch_target[N] = (n << 24);
    if (m_portamento_coef[N] == 0) {
      m_pitch_current[N] = m_pitch_target[N];
    }
    m_osc_on[N] = true;
  }

  template <uint8_t N>
  INLINE void note_off() {
    m_osc_on[N] = false;
  }

  INLINE void set_pitch_bend_range(uint8_t controller_value) {
    uint8_t range = controller_value;
    if (range > 64) {
      range = 64;
    }
    m_pitch_bend_range = range;
    update_pitch_bend();
  }

  INLINE void set_pitch_bend(int16_t pitch_bend) {
    m_pitch_bend = pitch_bend;
    update_pitch_bend();
  }

  INLINE uint16_t get_osc_pitch(uint8_t index) {
    uint16_t shifted_pitch = (64 << 8) + (m_pitch_current[index] >> 16) + m_pitch_bend_normalized;
    uint16_t osc_pitch;
    if (shifted_pitch > (64 << 8) + (NOTE_NUMBER_MAX << 8)) {
      osc_pitch = (NOTE_NUMBER_MAX << 8);
    } else if (shifted_pitch < (64 << 8) + (NOTE_NUMBER_MIN << 8)) {
      osc_pitch = (NOTE_NUMBER_MIN << 8);
    } else {
      osc_pitch = (m_pitch_current[index] >> 16) + m_pitch_bend_normalized;
    }
    return osc_pitch;
  }

  template <uint8_t N>
  INLINE void process_at_low_rate_a(int16_t lfo_level, int16_t eg_level) {
    update_pitch_current<N>();
    update_osc1_shape<N>(lfo_level, eg_level);
    update_osc1_shape_effective<N>();
    update_freq_base<N + 0>(lfo_level, eg_level);
    update_freq_base<N + 4>(lfo_level, eg_level);
  }

  INLINE void process_at_low_rate_b(uint8_t count, int16_t noise_int15) {
    switch (count & (0x08 - 1)) {
    case 0x00:
      update_freq_offset<0>(noise_int15);
      update_gate<0>();
      break;
    case 0x01:
      update_freq_offset<4>(noise_int15);
      break;
    case 0x02:
      update_freq_offset<1>(noise_int15);
      update_gate<1>();
      break;
    case 0x03:
      update_freq_offset<5>(noise_int15);
      update_mixer_control_effective();
      break;
    case 0x04:
      update_freq_offset<2>(noise_int15);
      update_gate<2>();
      break;
    case 0x05:
      update_freq_offset<6>(noise_int15);
      break;
    case 0x06:
      update_freq_offset<3>(noise_int15);
      update_gate<3>();
      break;
    case 0x07:
      update_freq_offset<7>(noise_int15);
      update_osc1_control_effective();
      break;
    }
  }

  template <uint8_t N>
  INLINE int16_t process(int16_t noise_int15) {
#if 1
    return process_osc<N>(noise_int15) >> 8;
#else
    return = 0;
#endif
  }

private:
  INLINE const int16_t* get_wave_table(uint8_t waveform, uint8_t note_number) {
    static int16_t** wave_table_table[7] = {
      g_osc_saw_wave_tables,       // WAVEFORM_SAW           = 0
      g_osc_square_wave_tables,    // WAVEFORM_SQUARE        = 1
      g_osc_triangle_wave_tables,  // WAVEFORM_TRIANGLE      = 2
      g_osc_sine_wave_tables,      // WAVEFORM_SINE          = 3
      g_osc_saw_wave_tables,       // WAVEFORM_1_PULSE       = 4
      g_osc_square_wave_tables,    // WAVEFORM_2_NOISE       = 5
    };

    return wave_table_table[waveform][note_number - NOTE_NUMBER_MIN];
  }

  INLINE int16_t get_wave_level(const int16_t* wave_table, uint32_t phase) {
    uint16_t phase16     = phase >> 8;
    uint16_t curr_index  = phase16 >> (16 - OSC_WAVE_TABLE_SAMPLES_BITS);
    uint16_t next_weight = phase16 & ((1 << (16 - OSC_WAVE_TABLE_SAMPLES_BITS)) - 1);
    int16_t  curr_data   = wave_table[curr_index + 0];
    int16_t  next_data   = wave_table[curr_index + 1];
    int16_t  level       = curr_data + (((next_data - curr_data) * next_weight) >> (16 - OSC_WAVE_TABLE_SAMPLES_BITS)); // lerp
    return level;
  }

  template <uint8_t N>
  INLINE int32_t process_osc(int16_t noise_int15) {
    int32_t result = 0;

    int16_t osc1_gain = m_mix_table[(OSC_MIX_TABLE_LENGTH - 1) - (m_mixer_osc_mix_control_effective >> 1)];
    int16_t osc2_gain = m_mix_table[                             (m_mixer_osc_mix_control_effective >> 1)];

    m_phase[N] += m_freq[N];
    boolean new_period_osc1 = (m_phase[N] & 0x00FFFFFF) < m_freq[N]; // crossing the begin of a osc 1 wave, the begin or the middle of a sub osc wave
    m_wave_table[N]      = reinterpret_cast<const int16_t*>((reinterpret_cast<const uintptr_t>(m_wave_table[N]) * (1 - new_period_osc1)));
    m_wave_table[N]      = reinterpret_cast<const int16_t*>( reinterpret_cast<const uint8_t*>( m_wave_table[N]) +
                                                            (reinterpret_cast<const uintptr_t>(m_wave_table_temp[N]) * new_period_osc1));

    m_wave_table[N + 12] = reinterpret_cast<const int16_t*>((reinterpret_cast<const uintptr_t>(m_wave_table[N + 12]) * (1 - new_period_osc1)));
    m_wave_table[N + 12] = reinterpret_cast<const int16_t*>( reinterpret_cast<const uint8_t*>( m_wave_table[N + 12]) +
                                                            (reinterpret_cast<const uintptr_t>(m_wave_table_temp[N + 8]) * new_period_osc1));

    m_wave_table[N + 16] = reinterpret_cast<const int16_t*>((reinterpret_cast<const uintptr_t>(m_wave_table[N + 16]) * (1 - new_period_osc1)));
    m_wave_table[N + 16] = reinterpret_cast<const int16_t*>( reinterpret_cast<const uint8_t*>( m_wave_table[N + 16]) +
                                                            (reinterpret_cast<const uintptr_t>(m_wave_table_temp[N + 16]) * new_period_osc1));

    if (m_waveform[0] == WAVEFORM_SINE) {
      // For Sine Wave (wave_3)

      // phase_modulation_depth_candidate = max(m_osc1_shape_effective[N] - (128 << 8), 0)
      volatile int32_t phase_modulation_depth_candidate = m_osc1_shape_effective[N] - (128 << 8);
      phase_modulation_depth_candidate = (phase_modulation_depth_candidate > 0) * phase_modulation_depth_candidate;

      m_osc1_phase_modulation_depth[N] = phase_modulation_depth_candidate;

      volatile int32_t phase_modulation_frequency_ratio_candidate = (((m_osc1_morph_control_effective + 2) >> 2) << 1) + 2;
      m_osc1_phase_modulation_frequency_ratio[N] = (m_osc1_phase_modulation_frequency_ratio[N] * (1 - new_period_osc1)) + (phase_modulation_frequency_ratio_candidate * new_period_osc1);

      uint32_t phase_3 = (((m_phase[N] >> 1) & 0x01FFFFFF) * m_osc1_phase_modulation_frequency_ratio[N]) >> 1;
      const int16_t* wave_table_sine = get_wave_table(WAVEFORM_SINE, 60);
      int16_t wave_3 = get_wave_level(wave_table_sine, phase_3);

      uint32_t phase_0 = m_phase[N] + ((wave_3 * m_osc1_phase_modulation_depth[N]) >> 4);
      int32_t wave_0 = get_wave_level(wave_table_sine, phase_0);
      result += (wave_0 * osc1_gain * m_osc_gain_effective[N]) >> 10;
    } else if (m_waveform[0] == WAVEFORM_SAW) {
      // phase_modulation_depth_candidate = max(m_osc1_shape_effective[N] - (128 << 8), 0)
      volatile int32_t phase_modulation_depth_candidate = m_osc1_shape_effective[N] - (128 << 8);
      phase_modulation_depth_candidate = (phase_modulation_depth_candidate > 0) * phase_modulation_depth_candidate;

      uint32_t freq_shape_morph =
        ((static_cast<int32_t>((m_freq[N] >> 1) * g_osc_tune_table[(((phase_modulation_depth_candidate + 512) >> 10) + 1 + 128) >> (8 - OSC_TUNE_TABLE_STEPS_BITS)]) >>
          OSC_TUNE_DENOMINATOR_BITS) >> 0) << 1;
      freq_shape_morph += (N + 4);
      m_phase_shape_morph[N] += freq_shape_morph;

      uint32_t phase_shift_base = (127 * (4 - N)) << (5 + 16 - 2);

      int32_t wave_0_0 = get_wave_level(m_wave_table[N], m_phase[N]);
      int32_t wave_0_1 = get_wave_level(m_wave_table[N], m_phase[N] - (m_phase_shape_morph[N] * 1) - (phase_shift_base * 3));
      int32_t wave_0_2 = get_wave_level(m_wave_table[N], m_phase[N] + (m_phase_shape_morph[N] * 1) + (phase_shift_base * 5));
      int32_t wave_0_3 = get_wave_level(m_wave_table[N], m_phase[N] - (m_phase_shape_morph[N] * 3) - (phase_shift_base * 5));
      int32_t wave_0_4 = get_wave_level(m_wave_table[N], m_phase[N] + (m_phase_shape_morph[N] * 3) + (phase_shift_base * 1));
      int32_t wave_0_5 = get_wave_level(m_wave_table[N], m_phase[N] - (m_phase_shape_morph[N] * 5) - (phase_shift_base * 1));
      int32_t wave_0_6 = get_wave_level(m_wave_table[N], m_phase[N] + (m_phase_shape_morph[N] * 5) + (phase_shift_base * 3));

      int32_t multi_saw_mix = (m_osc1_morph_control_effective + 1) >> 1;
      result += (((  ( multi_saw_mix       * (((wave_0_0 + wave_0_1 + wave_0_2 + wave_0_3 + wave_0_4 + wave_0_5 + wave_0_6) << 1) / 5))
                   + ((64 - multi_saw_mix) *    wave_0_0)) >> 6) * osc1_gain * m_osc_gain_effective[N]) >> 10;
    } else if (m_waveform[0] == WAVEFORM_SQUARE) {
      // phase_modulation_depth_candidate = max(m_osc1_shape_effective[N] - (64 << 8), 0)
      volatile int32_t phase_modulation_depth_candidate = m_osc1_shape_effective[N] - (64 << 8);
      phase_modulation_depth_candidate = (phase_modulation_depth_candidate > 0) * phase_modulation_depth_candidate;

      uint8_t phase_modulation_depth = (phase_modulation_depth_candidate + ((1 << 8) >> 1)) >> 8;

      int32_t wave_0_0  = +get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][0 ] << 8));
      int32_t wave_0_1  = -get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][1 ] << 8));
      int32_t wave_0_2  = +get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][2 ] << 8));
      int32_t wave_0_3  = -get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][3 ] << 8));
      int32_t wave_0_4  = +get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][4 ] << 8));
      int32_t wave_0_5  = -get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][5 ] << 8));
      int32_t wave_0_6  = +get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][6 ] << 8));
      int32_t wave_0_7  = -get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][7 ] << 8));
      int32_t wave_0_8  = +get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][8 ] << 8));
      int32_t wave_0_9  = -get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][9 ] << 8));
      int32_t wave_0_10 = +get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][10] << 8));
      int32_t wave_0_11 = -get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][11] << 8));
      int32_t wave_0_12 = +get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][12] << 8));
      int32_t wave_0_13 = -get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][13] << 8));
      int32_t wave_0_14 = +get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][14] << 8));
      int32_t wave_0_15 = -get_wave_level(m_wave_table[N + 16], m_phase[N] + (g_osc_sqr_shape_table[phase_modulation_depth][15] << 8));

      int32_t wave_0    = +get_wave_level(m_wave_table[N], m_phase[N]);

      int32_t sqr_sync_mix = (m_osc1_morph_control_effective + 1) >> 1;
      result += (((  ( sqr_sync_mix       * (wave_0_0  + wave_0_1  + wave_0_2  + wave_0_3  + wave_0_4  + wave_0_5  + wave_0_6  + wave_0_7  +
                                             wave_0_8  + wave_0_9  + wave_0_10 + wave_0_11 + wave_0_12 + wave_0_13 + wave_0_14 + wave_0_15))
                   + ((64 - sqr_sync_mix) *  wave_0)) >> 6) * osc1_gain * m_osc_gain_effective[N]) >> 10;
    } else {
      int32_t wave_0 = get_wave_level(m_wave_table[N], m_phase[N]);
      result += (wave_0 * osc1_gain * m_osc_gain_effective[N]) >> 10;

      // For Pulse Wave (wave_3)
      uint32_t phase_3 = m_phase[N] + (m_osc1_shape_effective[N] << 8);
      boolean new_period_osc1_add = ((phase_3 + 0x00800000) & 0x00FFFFFF) < (m_freq[N] + 0x00010000); // crossing the middle of a saw wave
      m_wave_table[N + 8] = reinterpret_cast<const int16_t*>((reinterpret_cast<const uintptr_t>(m_wave_table[N + 8]) * (1 - new_period_osc1_add)));
      m_wave_table[N + 8] = reinterpret_cast<const int16_t*>( reinterpret_cast<const uint8_t*>( m_wave_table[N + 8]) +
                                                             (reinterpret_cast<const uintptr_t>(m_wave_table_temp[N]) * new_period_osc1_add));
      int16_t wave_3 = get_wave_level(m_wave_table[N + 8], phase_3);
      result += ((((wave_3 * osc1_gain * m_osc_gain_effective[N]) >> 10) * (((m_osc1_morph_control_effective - 63) >> 1) << 1)) >> 6) * (m_waveform[0] == WAVEFORM_1_PULSE);
    }

    if (m_mixer_noise_sub_osc_control_effective >= 0) {
      // Sub Osc (wave_1)
      int16_t wave_1 = get_wave_level(m_wave_table[N + 12], m_phase[N] >> 1);
      result += (wave_1 * m_mixer_noise_sub_osc_control * m_osc_gain_effective[N]) >> 6;
    } else {
      // Noise (wave_1)
      int16_t wave_1 = noise_int15 >> 1;
      result += (wave_1 * -m_mixer_noise_sub_osc_control_effective * m_osc_gain_effective[N]) >> 6;
    }

    m_phase[N + 4] += m_freq[N + 4];
    boolean new_period_osc2 = (m_phase[N + 4] & 0x00FFFFFF) < m_freq[N + 4];
    m_wave_table[N + 4] = reinterpret_cast<const int16_t*>((reinterpret_cast<const uintptr_t>(m_wave_table[N + 4]) * (1 - new_period_osc2)));
    m_wave_table[N + 4] = reinterpret_cast<const int16_t*>( reinterpret_cast<const uint8_t*>( m_wave_table[N + 4]) +
                                                           (reinterpret_cast<const uintptr_t>(m_wave_table_temp[N + 4]) * new_period_osc2));
    if (m_waveform[1] != WAVEFORM_2_NOISE) {
      int16_t wave_2 = get_wave_level(m_wave_table[N + 4], m_phase[N + 4]);
      result += (wave_2 * osc2_gain * m_osc_gain_effective[N]) >> 10;
    } else {
      // Noise (wave_2)
      int16_t wave_2 = noise_int15 >> 1;
      result += (wave_2 * osc2_gain * m_osc_gain_effective[N]) >> 10;
    }

    return result;
  }

  template <uint8_t N>
  INLINE void update_pitch_current() {
    if (m_osc_on[N]) {
      if (m_pitch_current[N] <= m_pitch_target[N]) {
        m_pitch_current[N] = m_pitch_target[N]  - mul_s32_s32_h32((m_pitch_target[N] - m_pitch_current[N]) << 2,             m_portamento_coef[N]);
      } else {
        m_pitch_current[N] = m_pitch_current[N] + mul_s32_s32_h32((m_pitch_target[N] - m_pitch_current[N]) << 2, (1 << 30) - m_portamento_coef[N]);
      }
    }
  }

  template <uint8_t N>
  INLINE void update_freq_base(int16_t lfo_level, int16_t eg_level) {
    int16_t pitch_eg_amt;
    if (N >= 4) {
      pitch_eg_amt = m_pitch_eg_amt[1];
    } else {
      pitch_eg_amt = m_pitch_eg_amt[0];
    }
    uint16_t pitch_temp =  (64 << 8) + (m_pitch_current[N & 0x03] >> 16) + m_pitch_bend_normalized + ((eg_level * pitch_eg_amt) >> 14);

    uint8_t coarse = high_byte(pitch_temp);
    if (coarse < (NOTE_NUMBER_MIN + 64)) {
      pitch_temp = ((NOTE_NUMBER_MIN + 64) << 8);
    } else if (coarse >= (NOTE_NUMBER_MAX + 64)) {
      pitch_temp = ((NOTE_NUMBER_MAX + 64) << 8);
    }

    if (N >= 4) {
      pitch_temp += (lfo_level * m_pitch_lfo_amt[1]) >> 14;
      pitch_temp += (m_osc2_pitch << 8) + m_osc2_detune;
    } else {
      pitch_temp += (lfo_level * m_pitch_lfo_amt[0]) >> 14;
    }

    coarse = high_byte(pitch_temp);
    if (coarse < (NOTE_NUMBER_MIN + 64)) {
      pitch_temp = NOTE_NUMBER_MIN << 8;
    } else if (coarse >= (NOTE_NUMBER_MAX + 64)) {
      pitch_temp = NOTE_NUMBER_MAX << 8;
    } else {
      pitch_temp -= (64 << 8);
    }

    pitch_temp += 128;  // For g_osc_tune_table[]


    coarse = high_byte(pitch_temp);
    m_freq_base[N] = g_osc_freq_table[coarse - NOTE_NUMBER_MIN];
    if (N >= 4) {
      m_wave_table_temp[N]      = get_wave_table(m_waveform[1], coarse);
    } else {
      m_wave_table_temp[N]      = get_wave_table(m_waveform[0], coarse);
      m_wave_table_temp[N + 16] = get_wave_table(WAVEFORM_SAW,  coarse);

      // coarse_sub = max((coarse - 12), NOTE_NUMBER_MIN)
      volatile int32_t coarse_sub = (coarse - 12) - NOTE_NUMBER_MIN;
      coarse_sub = (coarse_sub > 0) * coarse_sub + NOTE_NUMBER_MIN;

      m_wave_table_temp[N + 8]  = get_wave_table(WAVEFORM_SINE, coarse_sub);
    }


    uint8_t fine = low_byte(pitch_temp);
    int32_t offset =
      ((static_cast<int32_t>((m_freq_base[N] >> 1) * g_osc_tune_table[fine >> (8 - OSC_TUNE_TABLE_STEPS_BITS)]) >>
        OSC_TUNE_DENOMINATOR_BITS) >> 0) << 1;
    m_freq_base[N] += offset;
    m_freq[N] = m_freq_base[N] + m_freq_offset[N];
  }

  template <uint8_t N>
  INLINE void update_freq_offset(int16_t noise_int15) {
    static_cast<void>(noise_int15);
    m_freq_offset[N] = (N >> 2) << 1;
    m_freq[N] = m_freq_base[N] + m_freq_offset[N];
  }

  template <uint8_t N>
  INLINE void update_gate() {
    if (m_gate_enabled) {
      if (m_osc_on[N]) {
        const int8_t half_level = (m_osc_level >> 1) + 1;

        if (m_osc_gain_effective[N] >= (m_osc_level - half_level)) {
          m_osc_gain_effective[N] = m_osc_level;
        } else {
          m_osc_gain_effective[N] += half_level;
        }
      } else {
        const int8_t one_fourth_level = (m_osc_level >> 2) + 1;

        if (m_osc_gain_effective[N] <= one_fourth_level) {
          m_osc_gain_effective[N] = 0;
        } else {
          m_osc_gain_effective[N] -= one_fourth_level;
        }
      }
    } else {
      m_osc_gain_effective[N] = m_osc_level;
    }
  }

  INLINE void update_osc1_control_effective() {
    m_osc1_shape_control_effective += (m_osc1_shape_control_effective < m_osc1_shape_control);
    m_osc1_shape_control_effective -= (m_osc1_shape_control_effective > m_osc1_shape_control);

    m_osc1_morph_control_effective += (m_osc1_morph_control_effective < m_osc1_morph_control);
    m_osc1_morph_control_effective -= (m_osc1_morph_control_effective > m_osc1_morph_control);
  }

  INLINE void update_mixer_control_effective() {
    m_mixer_osc_mix_control_effective       += (m_mixer_osc_mix_control_effective < m_mixer_osc_mix_control);
    m_mixer_osc_mix_control_effective       -= (m_mixer_osc_mix_control_effective > m_mixer_osc_mix_control);

    m_mixer_noise_sub_osc_control_effective += (m_mixer_noise_sub_osc_control_effective < m_mixer_noise_sub_osc_control);
    m_mixer_noise_sub_osc_control_effective -= (m_mixer_noise_sub_osc_control_effective > m_mixer_noise_sub_osc_control);
  }

  template <uint8_t N>
  INLINE void update_osc1_shape(int16_t lfo_level, int16_t eg_level) {
    volatile int32_t osc1_shape = (128 << 8) + (m_osc1_shape_control_effective << 8)
                                  + ((eg_level * m_shape_eg_amt) >> 5) - ((lfo_level * m_shape_lfo_amt) >> 5);

    // osc1_shape = clamp(y_0, (0 << 8), (256 << 8))
    osc1_shape = osc1_shape - (256 << 8);
    osc1_shape = (osc1_shape < 0) * osc1_shape + (256 << 8) - (0 << 8);
    osc1_shape = (osc1_shape > 0) * osc1_shape + (0 << 8);

    m_osc1_shape[N] = osc1_shape;
  }

  template <uint8_t N>
  INLINE void update_osc1_shape_effective() {
    // effective_new = clamp(m_osc1_shape[N], (m_osc1_shape_effective[N] - 0x0100), (m_osc1_shape_effective[N] + 0x0100))
    volatile int32_t effective_new = m_osc1_shape[N] - (m_osc1_shape_effective[N] + 0x0100);
    effective_new = (effective_new < 0) * effective_new + (m_osc1_shape_effective[N] + 0x0100) - (m_osc1_shape_effective[N] - 0x0100);
    effective_new = (effective_new > 0) * effective_new + (m_osc1_shape_effective[N] - 0x0100);
    m_osc1_shape_effective[N] = effective_new;
  }

  INLINE void update_pitch_bend() {
    int16_t b = m_pitch_bend + 1;
    b >>= 3;
    m_pitch_bend_normalized = (b * m_pitch_bend_range) >> 2;
  }
};
